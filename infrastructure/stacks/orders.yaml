AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Order-related resources with on-demand DB, tracing, and Dead Letter Queues for reliability.

Parameters:
  AppEventBusName: { Type: String }
  ProductsTableName: { Type: String }

Resources:
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Orders
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CreatedAtIndex
          KeySchema:
            - AttributeName: createdAt
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  CreateOrderFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../cmd/
      Handler: create-order
      Runtime: provided.al2023
      Tracing: Active
      Environment:
        Variables:
          ORDERS_TABLE_NAME: !Ref OrdersTable
          EVENT_BUS_NAME: !Ref AppEventBusName
          PRODUCTS_TABLE_NAME: !Ref ProductsTableName
      Policies:
        # Lambda basic execution (CloudWatch Logs)
        - AWSLambdaBasicExecutionRole
        # X-Ray tracing
        - XRayDaemonWriteAccess
        # Full CRUD access to Orders table
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
        # Read-only access to Products table
        - DynamoDBReadPolicy:
            TableName: !Ref ProductsTableName
        # Put events to EventBridge
        - Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/${AppEventBusName}'

Outputs:
  OrdersLambdaArn:
    Value: !GetAtt CreateOrderFunction.Arn
    Export:
      Name: OrdersLambdaArn
