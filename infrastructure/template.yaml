AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Template for the Dwell Well E-commerce application. All microservices and API Gateway in a single stack.

Globals:
  Api:
    Authorizers:
      CognitoAuthorizer:
        UserPoolArn: !GetAtt CognitoUserPool.Arn
  Function:
    Timeout: 30
    MemorySize: 256
    Tracing: Active
    Architectures:
      - x86_64

Parameters:
  ProductsTableName:
    Type: String
    Description: Name of the DynamoDB table for products.
    Default: DwellWellProductsTable

Resources:
# --- Cognito Resources ---
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: DwellWellUserPool
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: true
      UsernameAttributes: [email]
      AutoVerifiedAttributes: [email]

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: DwellWellWebAppClient
      GenerateSecret: false

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: IncidentReportingIdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName


  # --- API Gateway ---
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      TracingEnabled: true
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
#      Auth:
#        DefaultAuthorizer: CognitoAuthorizer
#        Authorizers:
#          CognitoAuthorizer:
#            UserPoolArn: !GetAtt CognitoUserPool.Arn

  # --- Event Bus ---
  AppEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: DwellWellAppEventBus

  EventBusPutEventsPolicy:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: !Ref AppEventBus
      StatementId: AllowPutEventsFromAccount
      Action: events:PutEvents
      Principal: "*"

  # --- Products Lambdas ---
  ProductsLambda:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../cmd/
      Handler: get-products
      Runtime: provided.al2023
      Environment:
        Variables:
          PRODUCTS_TABLE_NAME: !Ref ProductsTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductsTableName
        - AWSXrayWriteOnlyAccess
        - CloudWatchLogsFullAccess
      Events:
        ApiProducts:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /products
            Method: GET
            Auth:
                Authorizer: NONE

  # SKUsByPriceLambda:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../cmd/
      Handler: skus-by-price
      Runtime: provided.al2023
      Policies:
        - AWSXrayWriteOnlyAccess
        - CloudWatchLogsFullAccess
      Events:
        ApiSkus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /products/skus-by-price
            Method: GET

  # --- Webhooks Lambdas ---
  PaystackWebhookLambda:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../cmd/
      Handler: webhook-paystack
      Runtime: provided.al2023
      Environment:
        Variables:
          EVENT_BUS_NAME: !Ref AppEventBus
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref AppEventBus
        - AWSXrayWriteOnlyAccess
        - CloudWatchLogsFullAccess
      Events:
        ApiWebhookPaystack:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /webhooks/paystack
            Method: POST

  StrapiWebhookLambda:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../cmd/
      Handler: webhook-strapi
      Runtime: provided.al2023
      Environment:
        Variables:
          PRODUCTS_TABLE_NAME: !Ref ProductsTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductsTableName
        - AWSXrayWriteOnlyAccess
        - CloudWatchLogsFullAccess
      Events:
        ApiWebhookStrapi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /webhooks/strapi
            Method: POST

  # --- Optional / Future Stacks ---
  # PaymentsStack:
  #   Type: AWS::Serverless::Application
  #   Properties:
  #     Location: ./stacks/payments.yaml
  #     Parameters:
  #       ProductsTableName: !Ref ProductsTableName

  # OrdersStack:
  #   Type: AWS::Serverless::Application
  #   Properties:
  #     Location: ./stacks/orders.yaml
  #     Parameters:
  #       AppEventBusName: !Ref AppEventBus
  #       ProductsTableName: !Ref ProductsTableName

  # RatingsStack:
  #   Type: AWS::Serverless::Application
  #   Properties:
  #     Location: ./stacks/ratings.yaml
  #     Parameters:
  #       AppEventBusName: !Ref AppEventBus
  #       ProductsTableName: !Ref ProductsTableName

Outputs:
  ApiGatewayId:
    Value: !Ref ApiGateway
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  AppEventBusName:
    Value: !Ref AppEventBus
